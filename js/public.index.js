function gotohq() { open('http://hq.p5w.net/') } (function ($) { $.hqLoader = function (el, options) { $.hqLoader.defaultOptions = { stocks: [], class_render: 'render', updateInterval: 15000, jsonSrv: 'http://www.p5w.net/jsdata/', hqUrl: 'http://data.p5w.net/stock/market.php?code=@code@', chartWidth: 270, chartHeight: 135 }; var base = this; base.$el = $(el); base.el = el; base.$el.data("hqLoader", base); base.init = function () { base.options = $.extend({}, $.hqLoader.defaultOptions, options); base.updateHandle = new Array(); base.charts = new Array(); if (base.options.stocks.length <= 0) return; var tmphtml = new Array(); tmphtml.push('<div class="tabs">'); tmphtml.push('<div class="tabsHead">'); tmphtml.push('<div class="innerTabsHead">'); tmphtml.push('<ul>'); for (var i = 0; i < base.options.stocks.length; i++) { var n = base.options.stocks[i]; var m = typeof n.tab == "undefined" ? n.name : n.tab; tmphtml.push('<li>' + m + '</li>') } tmphtml.push('</ul>'); tmphtml.push('</div>'); tmphtml.push('</div>'); tmphtml.push('<div class="indexs_container">'); for (var i = 0; i < base.options.stocks.length; i++) { var n = base.options.stocks[i]; tmphtml.push('<div class="tabBox" style="display:none;">'); tmphtml.push('<dl>'); tmphtml.push('<dt><span class="n1"><a href="' + base.options.hqUrl.replace('@code@', n.code) + '" target="_blank">' + n.name + '</a></span><span class="n2">--</span><span class="n3">--</span><span class="n4">--</span></dt>'); tmphtml.push('<dd>'); tmphtml.push('<div class="chart" style="width:' + base.options.chartWidth + 'px; height:' + base.options.chartHeight + 'px;">'); tmphtml.push('<img src="http://www.p5w.net/images/loading.gif" alt="" />'); tmphtml.push('</div>'); tmphtml.push('</dd>'); tmphtml.push('</dl>'); tmphtml.push('</div>') } tmphtml.push('</div>'); tmphtml.push('</div>'); base.$el.html(tmphtml.join('')); base.$el.find('.tabsHead li').eq(0).addClass('hover'); base.$el.find('.tabBox').eq(0).show(); base.tabs = base.$el.find('.tabs'); base.charts = base.$el.find('.chart'); base.tabs.Tabs({ fadeSpeed: 0, TabEvent: 'click', onHover: function (idx, tabsDiv) { if (!$($(tabsDiv).get(idx)).find('dd').hasClass(base.options.class_render)) { base.loadData(idx) } } }); base.tabs.find("li:first-child").trigger("click") }; base.loadData = function (index) { var stockCode = base.options.stocks[index].code; if (!stockCode) return; var market = stockCode.substr(0, 2); var code = stockCode.substr(2, 6); $.getJSON(base.options.jsonSrv + code + ".json?t=" + (new Date().getTime), function (data) { if (data.status && data.status == "Y") { base.drawMinLine(data.indexHq, data.points, index, code, null); base.charts.eq(index).parent().addClass(base.options.class_render) } }) }; base.drawMinLine = function (data, points, index, url, param) { Highcharts.setOptions({ global: { useUTC: true }, lang: { months: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'], shortMonths: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'], weekdays: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'] } }); var plotLines = base.getPlotLines(points); var tickPositions = base.getTickPositions(points); base.setRealtimeData(points, index, false); new Highcharts.StockChart({ chart: { renderTo: base.charts.eq(index)[0], borderWidth: 0, borderRadius: 0, borderColor: '#dddddd', width: base.options.chartWidth, height: base.options.chartHeight, events: { load: function () { var series = this.series[0]; var loadhq = function (flash) { var s = new Date(); var hour = s.getHours(); var min = s.getMinutes(); var _sTime = hour * 60 + min; var _day = s.getDay(); if ((_sTime >= 565 && _sTime <= 691) || (_sTime >= 780 && _sTime <= 905)) { $.getJSON(base.options.jsonSrv + url + ".json?t=" + (new Date().getTime), function (data) { if (data.status && data.status == "Y") { var tmptickPositions = base.getTickPositions(data.points); series.yAxis.setOptions($.extend({}, series.yAxis.options, { tickPositions: tmptickPositions, opposite: true })); series.setData(data.indexHq, true); base.setRealtimeData(data.points, index, flash) } }); if (base.updateHandle[index]) { clearTimeout(base.updateHandle[index]) } base.updateHandle[index] = setTimeout(function () { loadhq(true) }, base.options.updateInterval) } }; loadhq(false) } } }, loading: { style: { backgroundColor: 'silver' }, labelStyle: { color: 'white' } }, legend: { enabled: false }, exporting: { enabled: false }, credits: { enabled: true, text: 'p5w.net', href: 'javascript:gotohq()', position: { align: 'right', x: -50, verticalAlign: 'bottom', y: -35 }, style: { cursor: 'pointer', color: '#999999', fontSize: '10px', fontFamily: "Arial" } }, rangeSelector: { enabled: false }, scrollbar: { enabled: false }, tooltip: { backgroundColor: { linearGradient: [0, 0, 0, 200], stops: [[0, 'rgba(96, 96, 96, .8)'], [1, 'rgba(16, 16, 16, .8)']] }, borderWidth: 0, style: { color: '#FFF' }, formatter: function () { var s = '<b>' + Highcharts.dateFormat('%H:%M', this.x) + '</b>'; $.each(this.points, function (i, point) { s += '<br/>' + new Number(point.y).toFixed(2) }); return s } }, xAxis: { type: 'datetime', dateTimeLabelFormats: { second: '%H:%M', minute: '%H:%M', hour: '%H:%M', day: '%H:%M', week: '%H:%M', month: '%H:%M', year: '%H:%M' }, gridLineDashStyle: "dash", gridLineWidth: 0.5, tickPositions: [570 * 60 * 1000, 630 * 60 * 1000, 690 * 60 * 1000, 840 * 60 * 1000, 900 * 60 * 1000], labels: { style: { position: 'absolute', color: '#0086d2', fontFamily: 'Consolas', fontSize: '11px' }, formatter: function () { var time = this.value / (1000 * 60); var min = time % 60; var str = (time - min) / 60 + ":"; str = min < 10 ? str + "0" + min : str + min; if (time == 690) str += "/" + "13:00"; if (time == 630 || time == 840) return ""; return str } } }, yAxis: { title: { text: '' }, showLastLabel: true, opposite: true, labels: { formatter: function () { return new Number(this.value).toFixed(0) }, align: 'left', x: 3, y: 3, style: { color: '#272727', fontFamily: 'Consolas', fontSize: '11px' } }, gridLineWidth: 0.5, plotLines: null, tickPositions: tickPositions }, navigator: { enabled: false }, series: [{ color: '#f00000', data: data, threshold: null, type: 'area', tooltip: { valueDecimals: 2 }, fillColor: { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, '#fffab0'], [1, 'rgba(255 ,250 ,176,0)']] } }] }) }; base.setRealtimeData = function (points, index, flash) { try { var open = parseFloat(points[0]); var height = parseFloat(points[2]); var low = parseFloat(points[3]); var now = parseFloat(points[4]); var dif = parseFloat(points[5]); var diffpercent = parseFloat(points[6]) } catch (e) { } var dt = base.charts.eq(index).parent().parent().find('dt'); dt.removeClass('red').removeClass('green'); if (dif > 0) { dt.addClass('red') } else if (dif < 0) { dt.addClass('green') } var n1 = $('.n1', dt); var n2 = $('.n2', dt); var n3 = $('.n3', dt); var n4 = $('.n4', dt); if (flash) { var bgcolor = "#e1fce1"; var oldbgcolor = "#ffffff"; if (dif > 0) { bgcolor = "#f9e0e1" } else if (dif < 0) { bgcolor = "#e1fce1" } n2.css({ background: bgcolor }).html(now.toFixed(2)); n3.css({ background: bgcolor }).html(dif.toFixed(2)); n4.css({ background: bgcolor }).html((diffpercent * 100).toFixed(2) + '%'); setTimeout(function () { n2.css({ background: oldbgcolor }); n3.css({ background: oldbgcolor }); n4.css({ background: oldbgcolor }) }, 500) } else { n2.html(now.toFixed(2)); n3.html(dif.toFixed(2)); n4.html((diffpercent * 100).toFixed(2) + '%') } }; base.getPlotLines = function (points) { var plotLines = null; var open = 0.00; try { if (points && points.length > 3) { open = parseFloat(points[0]) } } catch (e) { } plotLines = [{ value: open, color: '#999999', dashStyle: 'shortdash', width: 2, label: { text: '' } }]; return plotLines }; base.getTickPositions = function (points) { var open = 0.00; var low = 0.00; var hei = 0.00; var now = 0.00; var dif = 0.00; var tickPositions = null; try { open = parseFloat(points[0]); hei = parseFloat(points[2]); low = parseFloat(points[3]); now = parseFloat(points[4]); dif = parseFloat(points[5]) } catch (e) { } var maxl = 0.00; var maxh = 0.00; var sp = 0.00; if (hei <= 0) { hei = open } if (low <= 0) { low = open } if (Math.abs(open - low) > Math.abs(open - hei)) { maxl = low; sp = Math.abs(low - open); maxh = open + sp } else { sp = Math.abs(hei - open); maxl = open - sp; maxh = hei } tickPositions = [parseFloat(maxl).toFixed(2), parseFloat(open - sp / 2).toFixed(2), parseFloat(open).toFixed(2), parseFloat(open + sp / 2).toFixed(2), parseFloat(maxh).toFixed(2)]; return tickPositions }; base.init() }; $.fn.hqLoader = function (options) { return this.each(function () { (new $.hqLoader(this, options)) }) } })(jQuery);